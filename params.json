{"name":"Yo.js","tagline":"Yo.js is an open source framework to modularize your javascript and css code.","body":"### Welcome to Yo.js.\r\n\r\nYo.js is an open source framework to structure your javascript code base by following your own design pattern. It provides a maintainable code base for developers to focus on optimizing and develop a clean solution. It also comes with add on templating utility library to structure your DOM in an organised way.\r\n\r\nThe project is hosted on GitHub. You can report bugs and discuss features on the GitHub issues page. Yo.js is available for use under the MIT software license.\r\n\r\n### Introduction\r\n\r\nWhen working on large scale web applications which involves lots of javascript and css code. It really becomes pain for developers to organize the code in there desired manner. As developer you would want to follow your own design pattern.\r\n\r\nBut while following your own design pattern we would end up writing whole chunk of code in multiple js files each time while adding a js file you need to go ahead and include the js file into your html. At certain point it becomes the tedious task for developers.\r\n\r\nYo.js tries to solve your problem by tracking and synchronously including all js and css files. It provides flexibility for developers to have their own namespace mapped to there respective js files.\r\n\r\nYo.js is currently in beta version.\r\n\r\nTested and supported browsers IE 9+, Mozilla, Chrome.    \r\n\r\n### Usage & API's\r\n\r\n1. Setup configuration to include js and css files\r\n```\r\n        yo.core.config({\r\n\r\n           // Sets the root folder as the base directory for all future relative paths\r\n           baseUrl: \"\",\r\n\r\n           // Set the namespace for the application\r\n           namespace: \"App\",\r\n\r\n           // 3rd party script alias names (Easier to type \"jquery\" than \"libs/jquery, etc\")\r\n           path: {\r\n               model: \"js/app/model\",\r\n               view: \"js/app/view\",\r\n               controller: \"js/app/controller\",\r\n               libs: \"js/libs\",\r\n               styles: \"css\"\r\n           },\r\n\r\n           //Load JS files\r\n           loadScript: {\r\n               libs: [\"jquery\"],\r\n               model: [\"sample\"],\r\n               view: [\"sample\"],\r\n               controller: [\"sample\"]\r\n           },\r\n\r\n           //Load CSS & LESS file\r\n           loadCSS: {\r\n               styles: [\"style\", \"style.less\"]\r\n           }\r\n\r\n        }, function () {\r\n           //Callback function once files are loaded\r\n           console.log(App, \"Namespace is defined\"); \r\n           //(Define Class) App.model.sample, App.view.sample, App.controller.sample \r\n        });\r\n```\r\n\r\n* **baseURL** - Sets the root folder as the base directory for all future relative paths. Modify to your respective root path.\r\n\r\n* **namespace** - Defines the namespace for your application. \r\n\r\n* **path** - Define your path name or alias name for respective folders.\r\n\r\n* **loadScript** - Include the js files in its hierarchy. The property name is mapped to the path and the namespace such as (App.Model, App.View, App.Controller). We can also provide the extension but its not mandatory.\r\n\r\n* **loadCSS** - Include the css and less files in its hierarchy. \r\n\r\n### Yo Templating Library Usage\r\n\r\nYo.js comprises of stand alone light weight templating library similar to moustache or handlebar with simple and easy to feature to keep your DOM away from your javascript code.\r\n\r\n**1. Inserting Div Section from HTML Template**\r\n\r\na) Sample HTML Template\r\n\r\n```\r\n<div class=\"test\"> Show this div section. </div>\r\n<div class=\"test2\"> Not to be displayed </div>\r\n```\r\n\r\nb) Add test class from the above template\r\n\r\n```\r\n var insert = yo.utils.template.add({\r\n       ele : \".test\", // div section to be appended\r\n       root : \".hero\", // parent DOM reference to be append / default body\r\n       template : \"test.html\", // template file to be included\r\n       mode : \"append\" // default is \"append\" / \"insert\" \r\n}, function () {\r\n\tconsole.log(\"callback executed once div is appended\");\r\n});       \r\n```\r\n\r\n**2. Bind JSON data to the template**\r\n\r\na) Sample HTML template\r\n\r\n```\r\n<div id=\"test3\"><strong>{name}</strong> is working at {company} for {years}.</div>\r\n```\r\n\r\n**NOTE** : Curly braces \"{ }\" refers to the variable \r\n\r\nb) Bind JSON data to the template\r\n\r\n```\r\nvar jsonData = {\r\n\tname : \"John\",\r\n\tcompany: \"SocioMobilePlus\",\r\n\tyears: 1\r\n};\r\n\r\nvar test3 = yo.utils.template.add({\r\n\tele: \"#test3\",\r\n\troot: \".hero\",\r\n\ttemplate: \"test.html\", // template file to be included \r\n        mode : \"insert\", // inserts the div or container \r\n\tdata: {\r\n\t\tname: jsonData.name,\r\n\t\tcompany: jsonData.company,\r\n\t\tyears: jsonData.years\r\n\t}\r\n}, function () {\r\n\tconsole.log(\"callback executed once div is appended / inserted\");\r\n});\r\n```\r\n\r\n**3. Bind array of data**\r\n\r\na) Sample HTML Template\r\n\r\n```\r\n<div class=\"test4\"> {slno}.{name} is present today.</div>\r\n```\r\n\r\nb) Bind array of data from service layer\r\n\r\n```\r\nvar namesArray = [{slno: 1, name: \"Ajain\"}, {slno: 2, name: \"Vivek\"}];\r\n\r\nvar test5 = yo.utils.template.add({\r\n\tele : \".test4\",\r\n\troot : \".hero\",\r\n\ttemplate: \"test.html\",\r\n\tdata: namesArray // Bind array of data\r\n}, function () {\r\n\tconsole.log(\"callback executed once div is appended / inserted\");\r\n});\r\n``` \r\n\r\n**4. Remove the container from the DOM**\r\n\r\nRemove method removes the element or container from DOM but not from the cache\r\n\r\n```\r\nyo.utils.template.remove({\r\n\tuid: test.uid or \"#ele / .class\" // uid refers to the unique dom id while adding the element on DOM \r\n}, function () {\r\n        console.log(\"callback executed once div is removed\"); \r\n});\r\n```\r\n\r\n**5. Destroy the container from the DOM **\r\n\r\nDestroy method removes the element or container from DOM and from the cache memory\r\n\r\n```\r\nyo.utils.template.destroy({\r\n\tuid: test.uid or \"#ele / .class\" // uid refers to the unique dom id while adding the element on DOM \r\n}, function () {\r\n        console.log(\"callback executed once div is destroyed\"); \r\n});\r\n```\r\n\r\n**6. Fetch Cached DOM**\r\n\r\nCached DOM elements can be later used for adding elements on to the DOM. Cached elements drastically boosts the performance to add/ remove container.\r\n\r\n```\r\nconsole.log(yo.utils.template.cache());\r\n```\r\n\r\n### Author and Contributors\r\nAuthor - Ajain Vivek (@ajainvivek)\r\nContributors - Ajain Vivek (@ajainvivek).\r\n\r\n### Support or Contact\r\nFor any queries you can reach me out @ ajainvivek07@gmail.com or go ahead report an issue at Github issue pages.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}